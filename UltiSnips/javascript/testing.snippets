snippet atdsetup "Ava + Test Double unit test suite" b
import test from 'ava';
import td from 'testdouble';

test.beforeEach(t => {
	const ${1:subject} = require('./${2:$1}')${3};
	${3:Object.assign(t.context, {${1}});}
});

test.afterEach.always(() => {
	td.reset();
});
endsnippet

snippet asetup "Ava unit test suite" b
import test from 'ava';
import ${1:subject} from './${2:$1}';
endsnippet

snippet atest "Ava test case" b
test(\`
	Given ${1:-}
	When ${2:-}
	Then ${3:-}
\`, t => {
	const input = ${4};

	const actual = ${5:subject(input)};

	const expected = ${6};
	${7:t.deepEqual(actual, expected);}
});
endsnippet

snippet aatest "Ava async test case" b
test(\`
	Given ${1:-}
	When ${2:-}
	Then ${3:-}
\`, async t => {
	const input = ${4};

	const actual = await ${5:subject(input)};

	const expected = ${6};
	${7:t.deepEqual(actual, expected);}
});
endsnippet

snippet atctx "Ava extract test context" b
const { ${1:stub} } = t.context;
${2}
endsnippet

snippet tdr "Test Double dependency replacement" b
const ${1:dep} = td.replace('${2:path/to/file}', ${3:replacement});
endsnippet

snippet tdw "Test Double stubbing" b
td.when(${1:dep}(${2:td.matchers.anything()})${3:, ...opts})
	.then${4:Return}(${5:expected});
endsnippet

snippet tdv "Test Double verify invocation" b
td.verify(${1:dep}(${2:td.matchers.anything()})${3:, ...opts});
endsnippet

snippet tdnc "Test Double verify not called" b
td.verify(${1:dep}(), {
	ignoreExtraArgs: true,
	times: 0,
});
endsnippet
